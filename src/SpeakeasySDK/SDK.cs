//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SpeakeasySDK
{
    using Newtonsoft.Json;
    using SpeakeasySDK.Hooks;
    using SpeakeasySDK.Models.Errors;
    using SpeakeasySDK.Models.Shared;
    using SpeakeasySDK.Utils;
    using SpeakeasySDK.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Speakeasy API: The Subscriptions API manages subscriptions for CLI and registry events
    /// 
    /// <see>/docs} - The Speakeasy Platform Documentation</see>
    /// </summary>
    public interface ISDK
    {

        /// <summary>
        /// REST APIs for working with Registry artifacts
        /// </summary>
        public IArtifacts Artifacts { get; }

        /// <summary>
        /// REST APIs for managing Authentication
        /// </summary>
        public IAuth Auth { get; }

        /// <summary>
        /// REST APIs for retrieving Code Samples
        /// </summary>
        public ICodeSamples CodeSamples { get; }

        /// <summary>
        /// REST APIs for managing the github integration
        /// </summary>
        public IGithub Github { get; }

        /// <summary>
        /// REST APIs for managing Organizations (speakeasy L1 Tenancy construct)
        /// </summary>
        public IOrganizations Organizations { get; }

        /// <summary>
        /// REST APIs for managing reports (lint reports, change reports, etc)
        /// </summary>
        public IReports Reports { get; }

        /// <summary>
        /// REST APIs for managing short URLs
        /// </summary>
        public IShortURLs ShortURLs { get; }

        /// <summary>
        /// REST APIs for managing subscriptions
        /// </summary>
        public ISubscriptions Subscriptions { get; }

        /// <summary>
        /// REST APIs for managing LLM OAS suggestions
        /// </summary>
        public ISuggest Suggest { get; }

        /// <summary>
        /// REST APIs for managing Workspaces (speakeasy tenancy)
        /// </summary>
        public IWorkspaces Workspaces { get; }

        /// <summary>
        /// REST APIs for managing events captured by a speakeasy binary (CLI, GitHub Action etc)
        /// </summary>
        public IEvents Events { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// Server identifiers available to the SDK.
        /// </summary>
        public enum Server {
        Prod,
        }

        /// <summary>
        /// Server URLs available to the SDK.
        /// </summary>
        public static readonly Dictionary<Server, string> ServerMap = new Dictionary<Server, string>()
        {
            { Server.Prod, "https://api.prod.speakeasyapi.dev" },
        };

        public string ServerUrl = "";
        public Server? ServerName = null;
        public string? WorkspaceId;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            if (this.ServerName is null)
            {
                this.ServerName = SDKConfig.Server.Prod;
            }
            else if (!SDKConfig.ServerMap.ContainsKey(this.ServerName.Value))
            {
                throw new Exception($"Invalid server \"{this.ServerName.Value}\"");
            }

            Dictionary<string, string> serverDefault = new Dictionary<string, string>();

            return Utilities.TemplateUrl(SDKConfig.ServerMap[this.ServerName.Value], serverDefault);
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Speakeasy API: The Subscriptions API manages subscriptions for CLI and registry events
    /// 
    /// <see>/docs} - The Speakeasy Platform Documentation</see>
    /// </summary>
    public class SDK: ISDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "5.12.0";
        private const string _sdkGenVersion = "2.493.4";
        private const string _openapiDocVersion = "0.4.0";
        private const string _userAgent = "speakeasy-sdk/csharp 5.12.0 2.493.4 0.4.0 SpeakeasySDK";
        private string _serverUrl = "";
        private SDKConfig.Server? _server = null;
        private ISpeakeasyHttpClient _client;
        private Func<SpeakeasySDK.Models.Shared.Security>? _securitySource;
        public IArtifacts Artifacts { get; private set; }
        public IAuth Auth { get; private set; }
        public ICodeSamples CodeSamples { get; private set; }
        public IGithub Github { get; private set; }
        public IOrganizations Organizations { get; private set; }
        public IReports Reports { get; private set; }
        public IShortURLs ShortURLs { get; private set; }
        public ISubscriptions Subscriptions { get; private set; }
        public ISuggest Suggest { get; private set; }
        public IWorkspaces Workspaces { get; private set; }
        public IEvents Events { get; private set; }

        public SDK(SpeakeasySDK.Models.Shared.Security? security = null, Func<SpeakeasySDK.Models.Shared.Security>? securitySource = null, string? workspaceId = null, SDKConfig.Server? server = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (server != null)
            {
              _server = server;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _client = client ?? new SpeakeasyHttpClient();

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }

            SDKConfiguration = new SDKConfig()
            {
                WorkspaceId = workspaceId,
                ServerName = _server,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            Artifacts = new Artifacts(_client, _securitySource, _serverUrl, SDKConfiguration);


            Auth = new Auth(_client, _securitySource, _serverUrl, SDKConfiguration);


            CodeSamples = new CodeSamples(_client, _securitySource, _serverUrl, SDKConfiguration);


            Github = new Github(_client, _securitySource, _serverUrl, SDKConfiguration);


            Organizations = new Organizations(_client, _securitySource, _serverUrl, SDKConfiguration);


            Reports = new Reports(_client, _securitySource, _serverUrl, SDKConfiguration);


            ShortURLs = new ShortURLs(_client, _securitySource, _serverUrl, SDKConfiguration);


            Subscriptions = new Subscriptions(_client, _securitySource, _serverUrl, SDKConfiguration);


            Suggest = new Suggest(_client, _securitySource, _serverUrl, SDKConfiguration);


            Workspaces = new Workspaces(_client, _securitySource, _serverUrl, SDKConfiguration);


            Events = new Events(_client, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}