overlay: 1.0.0
info:
  title: CodeSamples overlay for csharp target
  version: 0.0.0
actions:
  - target: $["paths"]["/v1/artifacts/namespaces"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getNamespaces
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Artifacts.GetNamespacesAsync();

            // handle response
  - target: $["paths"]["/v1/artifacts/namespaces/{namespace_name}/revisions"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getRevisions
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetRevisionsRequest req = new GetRevisionsRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.GetRevisionsAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/namespaces/{namespace_name}/tags"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getTags
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetTagsRequest req = new GetTagsRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.GetTagsAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/namespaces/{namespace_name}/tags"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: postTags
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            PostTagsRequest req = new PostTagsRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.PostTagsAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/namespaces/{namespace_name}/visibility"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: setVisibility
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SetVisibilityRequest req = new SetVisibilityRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.SetVisibilityAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/preflight"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: preflight
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            PreflightRequest req = new PreflightRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.PreflightAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/remote_sources"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: listRemoteSources
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            ListRemoteSourcesRequest req = new ListRemoteSourcesRequest() {
                NamespaceName = "<value>",
            };

            var res = await sdk.Artifacts.ListRemoteSourcesAsync(req);

            // handle response
  - target: $["paths"]["/v1/artifacts/remote_sources"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: createRemoteSource
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            RemoteSource req = new RemoteSource() {
                Inputs = new List<RemoteDocument>() {
                    new RemoteDocument() {
                        RegistryUrl = "https://productive-swine.net",
                    },
                },
                Output = new RemoteDocument() {
                    RegistryUrl = "https://spiteful-apricot.info",
                },
            };

            var res = await sdk.Artifacts.CreateRemoteSourceAsync(req);

            // handle response
  - target: $["paths"]["/v1/auth/access_token"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getAccessToken
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;

            var sdk = new SDK();

            GetAccessTokenRequest req = new GetAccessTokenRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Auth.GetAccessTokenAsync(req);

            // handle response
  - target: $["paths"]["/v1/auth/validate"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: validateApiKey
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Auth.ValidateApiKeyAsync();

            // handle response
  - target: $["paths"]["/v1/code_sample"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getCodeSamples
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetCodeSamplesRequest req = new GetCodeSamplesRequest() {
                RegistryUrl = "https://normal-making.name",
            };

            var res = await sdk.CodeSamples.GetAsync(req);

            // handle response
  - target: $["paths"]["/v1/code_sample/preview"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: generateCodeSamplePreview
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            CodeSampleSchemaInput req = new CodeSampleSchemaInput() {
                Languages = new List<string>() {
                    "<value>",
                },
                SchemaFile = new SchemaFile() {
                    FileName = "example.file",
                    Content = System.Text.Encoding.UTF8.GetBytes("0xc3dD8BfBef"),
                },
            };

            var res = await sdk.CodeSamples.GenerateCodeSamplePreviewAsync(req);

            // handle response
  - target: $["paths"]["/v1/code_sample/preview/async"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: generateCodeSamplePreviewAsync
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            CodeSampleSchemaInput req = new CodeSampleSchemaInput() {
                Languages = new List<string>() {
                    "<value>",
                },
                SchemaFile = new SchemaFile() {
                    FileName = "example.file",
                    Content = System.Text.Encoding.UTF8.GetBytes("0xED5CDd177E"),
                },
            };

            var res = await sdk.CodeSamples.GenerateCodeSamplePreviewAsyncAsync(req);

            // handle response
  - target: $["paths"]["/v1/code_sample/preview/async/{jobID}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getCodeSamplePreviewAsync
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetCodeSamplePreviewAsyncRequest req = new GetCodeSamplePreviewAsyncRequest() {
                JobID = "<id>",
            };

            var res = await sdk.CodeSamples.GetCodeSamplePreviewAsyncAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/action"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getGitHubAction
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetGitHubActionRequest req = new GetGitHubActionRequest() {
                Org = "<value>",
                Repo = "<value>",
            };

            var res = await sdk.Github.GetActionAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/check_access"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: checkGithubAccess
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            CheckGithubAccessRequest req = new CheckGithubAccessRequest() {
                Org = "<value>",
                Repo = "<value>",
            };

            var res = await sdk.Github.CheckAccessAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/configure_code_samples"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubConfigureCodeSamples
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubConfigureCodeSamplesRequest req = new GithubConfigureCodeSamplesRequest() {
                Org = "<value>",
                Repo = "<value>",
                TargetName = "<value>",
            };

            var res = await sdk.Github.ConfigureCodeSamplesAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/configure_mintlify_repo"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubConfigureMintlifyRepo
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubConfigureMintlifyRepoRequest req = new GithubConfigureMintlifyRepoRequest() {
                Org = "<value>",
                Repo = "<value>",
                Input = "<value>",
                Overlays = new List<string>() {
                    "<value>",
                },
            };

            var res = await sdk.Github.ConfigureMintlifyRepoAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/configure_target"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubConfigureTarget
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubConfigureTargetRequest req = new GithubConfigureTargetRequest() {
                Org = "<value>",
                RepoName = "<value>",
            };

            var res = await sdk.Github.ConfigureTargetAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/link"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: linkGithubAccess
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            LinkGithubAccessRequest req = new LinkGithubAccessRequest() {};

            var res = await sdk.Github.LinkGithubAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/publishing_prs"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubCheckPublishingPRs
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubCheckPublishingPRsRequest req = new GithubCheckPublishingPRsRequest() {
                GenerateGenLockId = "<id>",
                Org = "<value>",
                Repo = "<value>",
            };

            var res = await sdk.Github.CheckPublishingPRsAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/publishing_secrets"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubCheckPublishingSecrets
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubCheckPublishingSecretsRequest req = new GithubCheckPublishingSecretsRequest() {
                GenerateGenLockId = "<id>",
            };

            var res = await sdk.Github.CheckPublishingSecretsAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/publishing_secrets"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubStorePublishingSecrets
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubStorePublishingSecretsRequest req = new GithubStorePublishingSecretsRequest() {
                GenerateGenLockId = "<id>",
            };

            var res = await sdk.Github.StorePublishingSecretsAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/setup"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getGithubSetupState
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetGithubSetupStateRequest req = new GetGithubSetupStateRequest() {
                Org = "<value>",
                Repo = "<value>",
                GenerateGenLockId = "<id>",
            };

            var res = await sdk.Github.GetSetupAsync(req);

            // handle response
  - target: $["paths"]["/v1/github/trigger_action"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: githubTriggerAction
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GithubTriggerActionRequest req = new GithubTriggerActionRequest() {
                Org = "<value>",
                RepoName = "<value>",
                GenLockId = "<id>",
            };

            var res = await sdk.Github.TriggerActionAsync(req);

            // handle response
  - target: $["paths"]["/v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/blobs/{digest}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getBlob
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetBlobRequest req = new GetBlobRequest() {
                OrganizationSlug = "<value>",
                WorkspaceSlug = "<value>",
                NamespaceName = "<value>",
                Digest = "<value>",
            };

            var res = await sdk.Artifacts.GetBlobAsync(req);

            // handle response
  - target: $["paths"]["/v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/manifests/{revision_reference}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getManifest
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetManifestRequest req = new GetManifestRequest() {
                OrganizationSlug = "<value>",
                WorkspaceSlug = "<value>",
                NamespaceName = "<value>",
                RevisionReference = "<value>",
            };

            var res = await sdk.Artifacts.GetManifestAsync(req);

            // handle response
  - target: $["paths"]["/v1/organization"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: createOrganization
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            Organization req = new Organization() {
                Id = "<id>",
                Name = "<value>",
                Slug = "<value>",
                AccountType = AccountType.ScaleUp,
                TelemetryDisabled = false,
                CreatedAt = System.DateTime.Parse("2024-11-30T17:06:07.804Z"),
                UpdatedAt = System.DateTime.Parse("2024-04-02T12:48:32.253Z"),
                SsoActivated = false,
            };

            var res = await sdk.Organizations.CreateAsync(req);

            // handle response
  - target: $["paths"]["/v1/organization/free_trial"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: createFreeTrial
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Organizations.CreateFreeTrialAsync();

            // handle response
  - target: $["paths"]["/v1/organization/usage"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getOrganizationUsage
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Organizations.GetUsageAsync();

            // handle response
  - target: $["paths"]["/v1/organization/{organizationID}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getOrganization
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetOrganizationRequest req = new GetOrganizationRequest() {
                OrganizationID = "<id>",
            };

            var res = await sdk.Organizations.GetAsync(req);

            // handle response
  - target: $["paths"]["/v1/organizations"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getOrganizations
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Organizations.GetAllAsync();

            // handle response
  - target: $["paths"]["/v1/reports"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: uploadReport
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            UploadReportRequestBody req = new UploadReportRequestBody() {
                Data = new Report() {},
                File = new File() {
                    FileName = "example.file",
                    Content = System.Text.Encoding.UTF8.GetBytes("0xA2Ca85EFA5"),
                },
            };

            var res = await sdk.Reports.UploadReportAsync(req);

            // handle response
  - target: $["paths"]["/v1/reports/changes/{documentChecksum}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getChangesReportSignedUrl
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetChangesReportSignedUrlRequest req = new GetChangesReportSignedUrlRequest() {
                DocumentChecksum = "<value>",
            };

            var res = await sdk.Reports.GetChangesReportSignedUrlAsync(req);

            // handle response
  - target: $["paths"]["/v1/reports/linting/{documentChecksum}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getLintingReportSignedUrl
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetLintingReportSignedUrlRequest req = new GetLintingReportSignedUrlRequest() {
                DocumentChecksum = "<value>",
            };

            var res = await sdk.Reports.GetLintingReportSignedUrlAsync(req);

            // handle response
  - target: $["paths"]["/v1/short_urls"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: create
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            CreateRequestBody req = new CreateRequestBody() {
                Url = "https://probable-heating.com/",
            };

            var res = await sdk.ShortURLs.CreateAsync(req);

            // handle response
  - target: $["paths"]["/v1/subscriptions/{subscriptionID}/{namespaceName}/activate"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: activateSubscriptionNamespace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            ActivateSubscriptionNamespaceRequest req = new ActivateSubscriptionNamespaceRequest() {
                SubscriptionID = "<id>",
                NamespaceName = "<value>",
            };

            var res = await sdk.Subscriptions.ActivateSubscriptionNamespaceAsync(req);

            // handle response
  - target: $["paths"]["/v1/subscriptions/{subscriptionID}/{namespaceName}/ignore"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: ignoreSubscriptionNamespace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            IgnoreSubscriptionNamespaceRequest req = new IgnoreSubscriptionNamespaceRequest() {
                SubscriptionID = "<id>",
                NamespaceName = "<value>",
            };

            var res = await sdk.Subscriptions.IgnoreSubscriptionNamespaceAsync(req);

            // handle response
  - target: $["paths"]["/v1/suggest/items"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: suggestItems
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SuggestItemsRequestBody req = new SuggestItemsRequestBody() {
                Prompt = "<value>",
                Items = new List<string>() {
                    "<value>",
                },
            };

            var res = await sdk.Suggest.SuggestItemsAsync(req);

            // handle response
  - target: $["paths"]["/v1/suggest/openapi"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: suggestOpenAPI
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SuggestOpenAPIRequest req = new SuggestOpenAPIRequest() {
                XSessionId = "<id>",
                RequestBody = new SuggestOpenAPIRequestBody() {
                    Schema = new Schema() {
                        FileName = "example.file",
                        Content = System.Text.Encoding.UTF8.GetBytes("0x0beEcB7cF6"),
                    },
                },
            };

            var res = await sdk.Suggest.SuggestOpenAPIAsync(req);

            // handle response
  - target: $["paths"]["/v1/suggest/openapi/{namespace_name}/{revision_reference}"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: suggestOpenAPIRegistry
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SuggestOpenAPIRegistryRequest req = new SuggestOpenAPIRegistryRequest() {
                NamespaceName = "<value>",
                RevisionReference = "<value>",
                XSessionId = "<id>",
            };

            var res = await sdk.Suggest.SuggestOpenAPIRegistryAsync(req);

            // handle response
  - target: $["paths"]["/v1/suggest/openapi_from_summary"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: suggest
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SuggestRequest req = new SuggestRequest() {
                XSessionId = "<id>",
                SuggestRequestBody = new SuggestRequestBody() {
                    OasSummary = new OASSummary() {
                        Info = new OASInfo() {
                            Title = "<value>",
                            Summary = "<value>",
                            Description = "ugh which garrote ashamed sarong fiddle really",
                            Version = "<value>",
                            License = new License() {},
                        },
                        Operations = new List<OASOperation>() {
                            new OASOperation() {
                                Method = "<value>",
                                Path = "/etc/ppp",
                                OperationId = "<id>",
                                Description = "meanwhile via apparatus gray whether opposite what down blah",
                                Tags = new List<string>() {
                                    "<value>",
                                },
                            },
                        },
                    },
                    SuggestionType = SuggestRequestBodySuggestionType.MethodNames,
                    Diagnostics = new List<Diagnostic>() {
                        new Diagnostic() {
                            Message = "<value>",
                            Path = new List<string>() {
                                "/etc/mail",
                            },
                            Type = "<value>",
                        },
                    },
                },
            };

            var res = await sdk.Suggest.SuggestAsync(req);

            // handle response
  - target: $["paths"]["/v1/user"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getUser
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Auth.GetUserAsync();

            // handle response
  - target: $["paths"]["/v1/workspace"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceByContext
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Workspaces.GetAsync();

            // handle response
  - target: $["paths"]["/v1/workspace"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: createWorkspace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            Workspace req = new Workspace() {
                CreatedAt = System.DateTime.Parse("2024-06-17T07:14:55.338Z"),
                Id = "<id>",
                Name = "<value>",
                OrganizationId = "<id>",
                Slug = "<value>",
                UpdatedAt = System.DateTime.Parse("2024-11-30T17:06:07.804Z"),
                Verified = false,
            };

            var res = await sdk.Workspaces.CreateAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/access"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceAccess
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceAccessRequest req = new GetWorkspaceAccessRequest() {};

            var res = await sdk.Auth.GetAccessAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/events/targets"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceTargets
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceTargetsRequest req = new GetWorkspaceTargetsRequest() {};

            var res = await sdk.Events.GetTargetsAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/feature_flags"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: setWorkspaceFeatureFlags
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            WorkspaceFeatureFlagRequest req = new WorkspaceFeatureFlagRequest() {
                FeatureFlags = new List<WorkspaceFeatureFlag>() {
                    WorkspaceFeatureFlag.SkipSchemaRegistry,
                },
            };

            var res = await sdk.Workspaces.SetFeatureFlagsAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceRequest req = new GetWorkspaceRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Workspaces.GetByIDAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/details"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: updateWorkspaceDetails
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            UpdateWorkspaceDetailsRequest req = new UpdateWorkspaceDetailsRequest() {
                WorkspaceId = "<id>",
                Workspace = new Workspace() {
                    CreatedAt = System.DateTime.Parse("2025-07-28T19:04:48.565Z"),
                    Id = "<id>",
                    Name = "<value>",
                    OrganizationId = "<id>",
                    Slug = "<value>",
                    UpdatedAt = System.DateTime.Parse("2024-10-16T10:52:42.015Z"),
                    Verified = false,
                },
            };

            var res = await sdk.Workspaces.UpdateAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/events"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: searchWorkspaceEvents
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            SearchWorkspaceEventsRequest req = new SearchWorkspaceEventsRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Events.SearchAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/events"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: postWorkspaceEvents
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;
            using System.Collections.Generic;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            PostWorkspaceEventsRequest req = new PostWorkspaceEventsRequest() {
                WorkspaceId = "<id>",
                RequestBody = new List<CliEvent>() {
                    new CliEvent() {
                        Id = "<id>",
                        ExecutionId = "<id>",
                        WorkspaceId = "<id>",
                        SpeakeasyApiKeyName = "<value>",
                        InteractionType = InteractionType.TargetGenerate,
                        LocalStartedAt = System.DateTime.Parse("2025-03-02T10:07:28.113Z"),
                        CreatedAt = System.DateTime.Parse("2024-09-08T05:59:33.876Z"),
                        SpeakeasyVersion = "<value>",
                        Success = false,
                    },
                },
            };

            var res = await sdk.Events.PostAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/events/targets"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceTargetsDeprecated
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceTargetsDeprecatedRequest req = new GetWorkspaceTargetsDeprecatedRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Events.GetTargetsDeprecatedAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/events/targets/{target_id}/events"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceEventsByTarget
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceEventsByTargetRequest req = new GetWorkspaceEventsByTargetRequest() {
                WorkspaceId = "<id>",
                TargetId = "<id>",
            };

            var res = await sdk.Events.GetEventsByTargetAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/feature_flags"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceFeatureFlags
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceFeatureFlagsRequest req = new GetWorkspaceFeatureFlagsRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Workspaces.GetFeatureFlagsAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/settings"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceSettings
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceSettingsRequest req = new GetWorkspaceSettingsRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Workspaces.GetSettingsAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/settings"]["put"]
    update:
      x-codeSamples:
        - lang: csharp
          label: updateWorkspaceSettings
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            UpdateWorkspaceSettingsRequest req = new UpdateWorkspaceSettingsRequest() {
                WorkspaceId = "<id>",
                WorkspaceSettings = new WorkspaceSettings() {
                    WorkspaceId = "<id>",
                    WebhookUrl = "https://last-suspension.info/",
                    CreatedAt = System.DateTime.Parse("2024-12-28T06:46:35.807Z"),
                    UpdatedAt = System.DateTime.Parse("2025-02-03T10:37:56.725Z"),
                },
            };

            var res = await sdk.Workspaces.UpdateSettingsAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/team"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceTeam
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceTeamRequest req = new GetWorkspaceTeamRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Workspaces.GetTeamAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/team/email/{email}"]["put"]
    update:
      x-codeSamples:
        - lang: csharp
          label: grantUserAccessToWorkspace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GrantUserAccessToWorkspaceRequest req = new GrantUserAccessToWorkspaceRequest() {
                WorkspaceId = "<id>",
                Email = "Lucinda.Batz8@hotmail.com",
            };

            var res = await sdk.Workspaces.GrantAccessAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/team/{userId}"]["delete"]
    update:
      x-codeSamples:
        - lang: csharp
          label: revokeUserAccessToWorkspace
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            RevokeUserAccessToWorkspaceRequest req = new RevokeUserAccessToWorkspaceRequest() {
                WorkspaceId = "<id>",
                UserId = "<id>",
            };

            var res = await sdk.Workspaces.RevokeAccessAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/tokens"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaceTokens
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            GetWorkspaceTokensRequest req = new GetWorkspaceTokensRequest() {
                WorkspaceId = "<id>",
            };

            var res = await sdk.Workspaces.GetTokensAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/tokens"]["post"]
    update:
      x-codeSamples:
        - lang: csharp
          label: createWorkspaceToken
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;
            using System;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            CreateWorkspaceTokenRequest req = new CreateWorkspaceTokenRequest() {
                WorkspaceId = "<id>",
                WorkspaceToken = new WorkspaceToken() {
                    Id = "<id>",
                    Name = "<value>",
                    WorkspaceId = "<id>",
                    Alg = "<value>",
                    Key = "<key>",
                    CreatedAt = System.DateTime.Parse("2023-08-16T02:33:00.784Z"),
                },
            };

            var res = await sdk.Workspaces.CreateTokenAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspace/{workspace_id}/tokens/{tokenID}"]["delete"]
    update:
      x-codeSamples:
        - lang: csharp
          label: deleteWorkspaceToken
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Operations;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            DeleteWorkspaceTokenRequest req = new DeleteWorkspaceTokenRequest() {
                WorkspaceId = "<id>",
                TokenID = "<id>",
            };

            var res = await sdk.Workspaces.DeleteTokenAsync(req);

            // handle response
  - target: $["paths"]["/v1/workspaces"]["get"]
    update:
      x-codeSamples:
        - lang: csharp
          label: getWorkspaces
          source: |-
            using SpeakeasySDK;
            using SpeakeasySDK.Models.Shared;

            var sdk = new SDK(security: new Security() {
                APIKey = "<YOUR_API_KEY_HERE>",
            });

            var res = await sdk.Workspaces.GetAllAsync();

            // handle response
